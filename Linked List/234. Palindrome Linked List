/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        
        if(head == null || head.next == null){
            return true; //as by default null and single digit is palindrome
        }
        
        /*Mid Point*/
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast.next !=null && fast.next.next != null){ //this gives the middle element and if it is even it gives the first middle element
            fast = fast.next.next;
            slow = slow.next;
        }
        
        ListNode head2 = slow.next;
        slow.next = null;
        
        ListNode temp2 = reverse(head2);
        ListNode temp = head;
        
        while(temp !=null && temp2 != null){
            if(temp.val != temp2.val)
                return false;
            temp = temp.next;
            temp2 = temp2.next;
        }
        
        return true;
        
        
    }
    
    public ListNode reverse(ListNode head){
        if(head == null){
            return null;
        }
        
        ListNode prev = null;
        ListNode current = head;
        ListNode next;
        
        while(current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        
        return prev;
    }
}
