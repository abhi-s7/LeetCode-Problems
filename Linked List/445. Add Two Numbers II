/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode temp = reverse(l1);
        ListNode temp2 = reverse(l2);
        ListNode foo = new ListNode(0);
        ListNode dummy = foo;
        
        int carry = 0;
        int sum = 0;
        int num1 = 0;
        int num2 = 0;
        while((temp!=null || temp2!= null)){
            
            if(temp == null) num1=0;
            else num1 = temp.val;
            
            if(temp2 == null) num2=0;
            else num2 = temp2.val;
           
            sum = carry + num1+ num2;
            carry = sum/10;
            
            //this will crete O(N) space
            dummy.next = new ListNode(sum%10);
            dummy = dummy.next;
            /*
            if(temp!=null){
                temp.val = sum % 10;
                dummy.next = temp;
                dummy = dummy.next;
            }else if(temp2!=null){
                temp2.val = sum % 10;
                dummy.next = temp2;
                dummy = dummy.next;
            }
             */   
            if(temp != null)
                temp = temp.next;
            
            if(temp2 != null)
                temp2 = temp2.next;      
        }
        
        if(carry>0)
            dummy.next = new ListNode(carry);
        
        return reverse(foo.next);
        
        
    }
    
     public ListNode reverse(ListNode head) {
        // if(head == null && head.next ==null)
        //     return head;
        ListNode prev = null;
        ListNode current = head;
        ListNode next = head;
        
        while(current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            
        }
        

        return prev;
    }
}
