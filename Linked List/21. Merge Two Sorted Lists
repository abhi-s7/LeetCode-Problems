/* 
   TC - O(N)
   SC - O(1)
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        ListNode resultF;
        
        if(temp1 == null && temp2 == null ){
            //throw new RuntimeException("Both lists are empty");
            return null;
        }else if(temp1 == null){
            return temp2;
        }else if(temp2 == null){
            return temp1;
        }
        
        if(temp1.val <= temp2.val){
            resultF = temp1;
            temp1 = temp1.next;
        }
        else{
            resultF = temp2;
            temp2 = temp2.next;
        }
           
        ListNode result = resultF;
        
        while(temp1 != null && temp2 != null){
            if(temp1.val <= temp2.val){
                result.next = temp1;
                result = result.next;
                temp1 = temp1.next;
            }else{
                result.next = temp2;
                result = result.next;
                temp2 = temp2.next;
            }
        }
        
        if(temp1 != null){
            result.next = temp1;
        }else if(temp2 != null)
            result.next = temp2;
        
        return resultF;
    }
}
