/* TC - O(N)
    SC - O(1)
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        /* i'll be using slow and fast pointer to that */
        
        if(head == null){
            return null;
        }
        
        ListNode slow = head;
        ListNode fast = head;
        
        
        while(fast != null){
            
            if(slow.val == fast.val){
                //increase the fast pointer
                fast = fast.next;
            }else{
                slow.next = fast;
                slow = slow.next;
                fast = fast.next;
            }
                        
        }
        slow.next = null;
        
        return head;   
    }
}
