/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null){
            return null;
        }
        /* Considering example 1->2->3->4->5 */
        
        // ListNode prev = head;
        // ListNode tail = head;
        ListNode prevHead = new ListNode(0);
        ListNode tail = new ListNode(0);
        ListNode prev = prevHead;
        
        prev.next = head;
        tail.next = head;
        
        for(int i = 1; i<m; i++){
            prev = prev.next; // At m-1
            //fast = fast.next;
        }
        for(int i= 1; i<=n; i++){
            tail = tail.next; // At n
        }
        
        ListNode current = prev.next; //2
       // 1->5
        prev.next = tail.next;
        
        tail.next = null;
        
        tail = reverse(current);//tail becomes current and current becomes tail
        
        current.next = prev.next;
        prev.next = tail;
        
//         for(int i = 1; i<m-1; i++){
//             prev = prev.next;
//             //fast = fast.next;
//         }
//         for(int i= 1; i<n; i++){
//             fast = fast.next;
//         }
//         ListNode temp = fast.next;
//         fast.next = null;
        
//         ListNode temp2 = prev.next;
//         ListNode head2 = reverse(temp2);
        
//         prev.next= head2;
//         temp2.next = temp;
        
        return prevHead.next;
        
        
    }
    
    public ListNode reverse(ListNode head){
        if(head == null){
            return null;
        }
        
        ListNode prev = null;
        ListNode current = head;
        ListNode next;
        
        while(current != null){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        
        return prev;
    }
}
