/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        /*
        int total = height(root.left) + height(root.right); //calculating the height of left sub tree, right sub tree + 1 for the root
        //now computing the total for the left and right node as cases can be such that total diameter is max in left or right sub tree
        int leftTotal = diameterOfBinaryTree(root.left);
        int rightTotal = diameterOfBinaryTree(root.right);
        
        return Math.max(total,Math.max(leftTotal, rightTotal));
        */
       
        maxDepth(root);
        return max;
        
    }
    private int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        max = Math.max(max, left + right);
        
        return Math.max(left, right) + 1;
    }
    /*
    int height(TreeNode root){
        if(root == null) return 0;
                
        int left = height(root.left);
        int right = height(root.right);
        
        return Math.max(left, right) + 1;
    }
    */
}
