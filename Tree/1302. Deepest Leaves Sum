/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        
        List<Integer> list = new ArrayList<>();

        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        
        int sum = 0;
        while(!queue.isEmpty()){
            
            int size = queue.size();
            sum = 0; //this is to reinitialize with every level
            
            while(size != 0){
                
                TreeNode parent = queue.poll();
                sum+= parent.val;
                
                if(parent.left!=null){
                    queue.add(parent.left);
                }
                
                if(parent.right != null){
                    queue.add(parent.right);
                }
                
                size--;
            }
            
        }
        
        return sum;
        
    }
}
