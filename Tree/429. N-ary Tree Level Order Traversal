/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> parentList = new ArrayList<>();

        if(root == null)
            return parentList;
        
        LinkedList<Node> queue = new LinkedList<Node>();
        
        queue.add(root);
        List<Integer> list = new ArrayList<Integer>();
        list.add(root.val);
        parentList.add(list);

        queue.add(null);
        
        while(!queue.isEmpty()){
            
             Node first = queue.peek();
                   
             if(first !=null){
                
                list = new ArrayList<Integer>();
                while(queue.peek() != null){
                    
                    Node parent = queue.remove();
                    
                    if(parent.children.size() != 0){
                        List<Node> children = parent.children;
                        
                        for(int i=0; i<children.size(); i++){
                            Node child = children.get(i);
                            if(child != null){
                                 queue.add(child);
                                list.add(child.val);
                            }
                           
                        }
                        
                        
                        
                    }
                    
                    /*If it was a binary tree then do below*/
                    
//                     if(parent.left != null){
//                         queue.add(parent.left);
//                         list.add(parent.data);
//                     }
                       

//                     if(parent.right != null){
//                         queue.add(parent.right);
//                         list.add(parent.data);
//                     }    
                    
                }
                 if(list.size() != 0)
                    parentList.add(list);
                 
                 queue.add(null);
            }
            queue.remove();
  
        }
        
        return parentList;
    }
}
